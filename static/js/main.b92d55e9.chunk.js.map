{"version":3,"sources":["components/PostItem.js","components/Loader.js","components/PostsList.js","components/AddForm.js","components/AddPost.js","components/Page404.js","components/ViewPost.js","App.js","serviceWorker.js","index.js"],"names":["PostItem","content","created","children","className","src","faker","image","avatar","alt","href","name","firstName","moment","format","Loader","class","PostsList","state","posts","loading","setData","setState","getPosts","axios","get","process","then","response","data","this","map","post","key","id","to","React","Component","AddForm","onSubmit","useState","value","setValue","setLoading","useEffect","onChange","event","target","onClick","evt","preventDefault","AddPost","saved","setSaved","catch","error","console","log","message","Page404","ViewPost","deleted","editing","toggleEditing","prevState","handleDelete","params","props","match","delete","handleEdit","history","go","Number","find","item","undefined","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6PA0BeA,EAtBE,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SACpC,OACE,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,4BACb,yBAAKC,IAAKC,IAAMC,MAAMC,SAAUC,IAAI,YAEtC,yBAAKL,UAAU,WACb,0BAAMM,KAAK,IAAIN,UAAU,2BACtBE,IAAMK,KAAKC,aAEd,yBAAKR,UAAU,YACb,0BAAMA,UAAU,8BACbS,IAAOX,GAASY,OAAO,yBAG5B,yBAAKV,UAAU,QAAQH,GACvB,yBAAKG,UAAU,WAAWD,MCTnBY,EATA,kBACb,yBAAKC,MAAM,eACT,yBAAKA,MAAM,OACT,yBAAKA,MAAM,cAEb,yBAAKA,MAAM,SAAX,qBCsCWC,E,4MAtCbC,MAAQ,CACNC,MAAO,GACPC,SAAS,G,EAKXC,QAAU,SAACF,GACT,EAAKG,SAAS,CAAEH,QAAOC,SAAS,K,EAGlCG,SAAW,WACTC,IACGC,IADH,UACUC,sCADV,WAEGC,MAAK,SAACC,GAAD,OAAc,EAAKP,QAAQO,EAASC,U,kEAT5CC,KAAKP,a,+BAYG,IAAD,EACoBO,KAAKZ,MAAxBC,EADD,EACCA,MAER,OAHO,EACQC,QAGN,kBAAC,EAAD,MAIP,yBAAKhB,UAAU,eACZe,EAAMY,KAAI,SAACC,GAAD,OACT,kBAAC,EAAD,eAAUC,IAAKD,EAAKE,IAAQF,GAC1B,kBAAC,IAAD,CAAMG,GAAE,iBAAYH,EAAKE,IAAM9B,UAAU,qBAAzC,mE,GA7BYgC,IAAMC,W,QCuCfC,EA1CC,SAAC,GAAqC,IAAnCrC,EAAkC,EAAlCA,QAASsC,EAAyB,EAAzBA,SAAUpC,EAAe,EAAfA,SAAe,EACzBqC,mBAAS,IADgB,mBAC5CC,EAD4C,KACrCC,EADqC,OAErBF,oBAAS,GAFY,mBAE5CpB,EAF4C,KAEnCuB,EAFmC,KAInDC,qBAAU,WACJ3C,GACFyC,EAASzC,KAEV,CAACA,IAcJ,OAAImB,EACK,kBAAC,EAAD,MAIP,0BAAMhB,UAAU,WACd,yBAAKA,UAAU,SACb,8BAAUyC,SAbK,SAACC,GAAW,IACvBL,EAAUK,EAAMC,OAAhBN,MAERC,EAASD,IAU6BA,MAAOA,KAE3C,yBACErC,UAAU,sCACV4C,QAAS,SAACC,GAAD,OAvBOH,EAuBeG,EAtBnCN,GAAW,GACXG,EAAMI,sBACNX,EAASE,GAHU,IAACK,IAyBhB,uBAAG1C,UAAU,2BAJf,6EAMCD,ICbQgD,EAtBC,WAAO,IAAD,EACMX,oBAAS,GADf,mBACbY,EADa,KACNC,EADM,KAepB,OAAID,EACK,kBAAC,IAAD,CAAUjB,GAAG,MAGf,kBAAC,EAAD,CAASI,SAhBK,SAACE,GACpBjB,IACGQ,KADH,UACWN,sCADX,UACoD,CAChDQ,GAAI,EACJjC,QAASwC,IAEVd,MAAK,kBAAM0B,GAAS,MACpBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,EAAMG,gBCAXC,EAdC,kBACd,yBAAKvD,UAAU,mBACb,uBAAGA,UAAU,uBACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,UAAf,4CACA,+vBCgGSwD,E,4MA9Fb1C,MAAQ,CACNc,KAAM,KACN6B,SAAS,EACTC,SAAS,EACT1C,SAAS,G,EAcX2C,cAAgB,WACd,EAAKzC,UAAS,SAAC0C,GAAD,MAAgB,CAC5BF,SAAUE,EAAUF,a,EAIxBG,aAAe,WACb,EAAK3C,SAAS,CAAEF,SAAS,IADN,IAGR8C,EACP,EAAKC,MADPC,MAASF,OAGX1C,IACG6C,OADH,UACa3C,sCADb,kBACsDwC,EAAOhC,KAC1DP,MAAK,kBAAM,EAAKL,SAAS,CAAEuC,SAAS,OACpCP,OAAM,SAACC,GACNC,QAAQC,IAAIF,EAAMG,a,EAIxBY,WAAa,SAAC7B,GACZjB,IACGQ,KADH,UACWN,sCADX,UACoD,CAChDQ,GAAI,EAAKhB,MAAMc,KAAKE,GACpBjC,QAASwC,IAEVd,MAAK,kBAAM,EAAKwC,MAAMI,QAAQC,GAAG,MACjClB,OAAM,SAACC,GACNC,QAAQC,IAAIF,EAAMG,a,kEAvCH,IAAD,OAEPQ,EACPpC,KAAKqC,MADPC,MAASF,OAELhC,EAAKuC,OAAOP,EAAOhC,IACzBV,IAAMC,IAAN,UAAaC,sCAAb,WAAsDC,MAAK,SAACC,GAC1D,IAAMI,EAAOJ,EAASC,KAAK6C,MAAK,SAACC,GAAD,OAAUA,EAAKzC,KAAOA,KACtD,EAAKZ,SAAS,CAAEU,OAAMZ,SAAS,S,+BAoCzB,IAAD,SACqCU,KAAKZ,MAAzCc,EADD,EACCA,KAAM6B,EADP,EACOA,QAASC,EADhB,EACgBA,QAAS1C,EADzB,EACyBA,QAEhC,OAAIyC,EACK,kBAAC,IAAD,CAAU1B,GAAG,MAGlB2B,EAEA,kBAAC,EAAD,CAAS7D,QAAS+B,EAAK/B,QAASsC,SAAUT,KAAKwC,YAC7C,yBACElE,UAAU,gBACV4C,QAAS,kBAAM,EAAKe,kBAFtB,0DAUOa,IAAT5C,EACK,kBAAC,EAAD,MAGLZ,EACK,kBAAC,EAAD,OAGToC,QAAQC,IAAI3B,KAAKZ,OAEf,yBAAKd,UAAU,eACb,kBAAC,EAAa4B,EACZ,4BAAQ5B,UAAU,wBAAwB4C,QAASlB,KAAKiC,eAAxD,oDAGA,4BAAQ3D,UAAU,sBAAsB4C,QAASlB,KAAKmC,cAAtD,qD,GAtFa7B,IAAMC,WC4BdwC,E,uKA3BX,OACE,yBAAKzE,UAAU,gDACb,kBAAC,IAAD,KACE,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,6BACb,kBAAC,IAAD,CAAM+B,GAAG,IAAI/B,UAAU,kBACrB,uBAAGA,UAAU,sBAEf,kBAAC,IAAD,CAAM+B,GAAG,aAAa/B,UAAU,sBAAhC,yEAKJ,yBAAKA,UAAU,oBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0E,KAAK,aAAaC,UAAW5B,IACpC,kBAAC,IAAD,CAAO2B,KAAK,aAAaC,UAAWnB,IACpC,kBAAC,IAAD,CAAOkB,KAAK,IAAIE,OAAK,EAACD,UAAW9D,IACjC,kBAAC,IAAD,CAAO6D,KAAK,IAAIC,UAAWpB,Y,GApBvBvB,IAAMC,WCKJ4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShB,MACvB,2DCZNiB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhE,MAAK,SAAAiE,GACjCA,EAAaC,iB","file":"static/js/main.b92d55e9.chunk.js","sourcesContent":["import React from \"react\";\nimport faker from \"faker\";\nimport moment from \"moment\";\n\nconst PostItem = ({ content, created, children }) => {\n  return (\n    <div className=\"ui centered card\">\n      <div className=\"ui medium circular image\">\n        <img src={faker.image.avatar()} alt=\"avatar\" />\n      </div>\n      <div className=\"content\">\n        <span href=\"#\" className=\"ui red horizontal label\">\n          {faker.name.firstName()}\n        </span>\n        <div className=\"metadata\">\n          <span className=\"ui purple horizontal label\">\n            {moment(created).format(\"DD.MM.YYYY HH:mm:ss\")}\n          </span>\n        </div>\n        <div className=\"text\">{content}</div>\n        <div className=\"actions\">{children}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default PostItem;\n","import React from \"react\";\n\nconst Loader = () => (\n  <div class=\"ui progress\">\n    <div class=\"bar\">\n      <div class=\"progress\"></div>\n    </div>\n    <div class=\"label\">Uploading Files</div>\n  </div>\n);\n\nexport default Loader;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport axios from \"axios\";\nimport PostItem from \"./PostItem\";\nimport Loader from \"./Loader\";\n\nclass PostsList extends React.Component {\n  state = {\n    posts: [],\n    loading: true,\n  };\n  componentDidMount() {\n    this.getPosts();\n  }\n  setData = (posts) => {\n    this.setState({ posts, loading: false });\n  };\n\n  getPosts = () => {\n    axios\n      .get(`${process.env.REACT_APP_POSTS_URL}/posts`)\n      .then((response) => this.setData(response.data));\n  };\n\n  render() {\n    const { posts, loading } = this.state;\n\n    if (loading) {\n      return <Loader />;\n    }\n\n    return (\n      <div className=\"ui comments\">\n        {posts.map((post) => (\n          <PostItem key={post.id} {...post}>\n            <Link to={`/posts/${post.id}`} className=\"ui teal tag label\">\n              Побробнее\n            </Link>\n          </PostItem>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default PostsList;\n","import React, { useState, useEffect } from \"react\";\nimport Loader from \"./Loader\";\n\nconst AddForm = ({ content, onSubmit, children }) => {\n  const [value, setValue] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (content) {\n      setValue(content);\n    }\n  }, [content]);\n\n  const handleSubmit = (event) => {\n    setLoading(true);\n    event.preventDefault();\n    onSubmit(value);\n  };\n\n  const handleChange = (event) => {\n    const { value } = event.target;\n\n    setValue(value);\n  };\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <form className=\"ui form\">\n      <div className=\"field\">\n        <textarea onChange={handleChange} value={value}></textarea>\n      </div>\n      <div\n        className=\"ui green labeled submit icon button\"\n        onClick={(evt) => handleSubmit(evt)}\n      >\n        <i className=\"hand pointer blue icon\"></i> Опубликовать\n      </div>\n      {children}\n    </form>\n  );\n};\n\nexport default AddForm;\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport AddForm from \"./AddForm\";\n\nconst AddPost = () => {\n  const [saved, setSaved] = useState(false);\n\n  const handleSubmit = (value) => {\n    axios\n      .post(`${process.env.REACT_APP_POSTS_URL}/posts`, {\n        id: 0,\n        content: value,\n      })\n      .then(() => setSaved(true))\n      .catch((error) => {\n        console.log(error.message);\n      });\n  };\n\n  if (saved) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return <AddForm onSubmit={handleSubmit} />;\n};\n\nexport default AddPost;\n","import React from \"react\";\n\nconst Page404 = () => (\n  <div className=\"ui icon message\">\n    <i className=\"power off red icon\"></i>\n    <div className=\"content\">\n      <div className=\"header\">Ошибка 404</div>\n      <p>\n        Извини, друг. Страница, которую вы запросили, не находится в нашей базе\n        данных. Скорее всего вы попали на битую ссылку или опечатались при вводе\n        URL\n      </p>\n    </div>\n  </div>\n);\n\nexport default Page404;\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport PostItem from \"./PostItem\";\nimport AddForm from \"./AddForm\";\nimport Page404 from \"./Page404\";\nimport Loader from \"./Loader\";\n\nclass ViewPost extends React.Component {\n  state = {\n    post: null,\n    deleted: false,\n    editing: false,\n    loading: true,\n  };\n\n  componentDidMount() {\n    const {\n      match: { params },\n    } = this.props;\n    const id = Number(params.id);\n    axios.get(`${process.env.REACT_APP_POSTS_URL}/posts`).then((response) => {\n      const post = response.data.find((item) => item.id === id);\n      this.setState({ post, loading: false });\n    });\n  }\n\n  toggleEditing = () => {\n    this.setState((prevState) => ({\n      editing: !prevState.editing,\n    }));\n  };\n\n  handleDelete = () => {\n    this.setState({ loading: true });\n    const {\n      match: { params },\n    } = this.props;\n\n    axios\n      .delete(`${process.env.REACT_APP_POSTS_URL}/posts/${params.id}`)\n      .then(() => this.setState({ deleted: true }))\n      .catch((error) => {\n        console.log(error.message);\n      });\n  };\n\n  handleEdit = (value) => {\n    axios\n      .post(`${process.env.REACT_APP_POSTS_URL}/posts`, {\n        id: this.state.post.id,\n        content: value,\n      })\n      .then(() => this.props.history.go(0))\n      .catch((error) => {\n        console.log(error.message);\n      });\n  };\n\n  render() {\n    const { post, deleted, editing, loading } = this.state;\n\n    if (deleted) {\n      return <Redirect to=\"/\" />;\n    }\n\n    if (editing) {\n      return (\n        <AddForm content={post.content} onSubmit={this.handleEdit}>\n          <div\n            className=\"ui red button\"\n            onClick={() => this.toggleEditing()}\n          >\n            Отменить\n          </div>\n        </AddForm>\n      );\n    }\n\n    if (post === undefined) {\n      return <Page404 />;\n    }\n\n    if (loading) {\n      return <Loader />;\n    }\n\n    console.log(this.state);\n    return (\n      <div className=\"ui comments\">\n        <PostItem {...post}>\n          <button className=\"ui brown basic button\" onClick={this.toggleEditing}>\n            Изменить\n          </button>\n          <button className=\"ui red basic button\" onClick={this.handleDelete}>\n            Удалить\n          </button>\n        </PostItem>\n      </div>\n    );\n  }\n}\n\nexport default ViewPost;\n","import React from \"react\";\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport PostsList from \"./components/PostsList\";\nimport AddPost from \"./components/AddPost\";\nimport ViewPost from \"./components/ViewPost\";\nimport Page404 from \"./components/Page404\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"ui raised very padded text container segment\">\n        <Router>\n          <div className=\"ui basic segment\">\n            <div className=\"ui center aligned segment\">\n              <Link to=\"/\" className=\"ui icon button\">\n                <i className=\"home orange icon\"></i>\n              </Link>\n              <Link to=\"/posts/new\" className=\"positive ui button\">\n                Создать пост\n              </Link>\n            </div>\n          </div>\n          <div className=\"ui basic segment\">\n            <Switch>\n              <Route path=\"/posts/new\" component={AddPost} />\n              <Route path=\"/posts/:id\" component={ViewPost} />\n              <Route path=\"/\" exact component={PostsList} />\n              <Route path=\"*\" component={Page404} />\n            </Switch>\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}